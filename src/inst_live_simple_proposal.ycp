/**
 *
 */
{

import "BootCommon";
import "GetInstArgs";
import "Popup";
import "Product";
import "Wizard";
import "LiveInstaller";
import "Storage";
import "HTML";
import "Label";
import "Keyboard";
import "Timezone";

textdomain "live-installer";

Wizard::SetContents (
    // dialog caption
    _("Installation settings"),
    // label
    `Label (_("Analyzing the system...")),
    "",
    false,
    false
);

WFM::CallFunction ( "partitions_proposal",
    [ "MakeProposal", $[
	"force_reset" : false,
	"language_changed" : false ]
    ]
);

WFM::CallFunction ( "bootloader_proposal",
    [ "MakeProposal", $[
	"force_reset" : false,
	"language_changed" : false ]
    ]
);

WFM::CallFunction ( "timezone_proposal",
    [ "MakeProposal", $[
	"force_reset" : false,
	"language_changed" : false ]
    ]
);

WFM::CallFunction ( "keyboard_proposal",
    [ "MakeProposal", $[
	"force_reset" : false,
	"language_changed" : false ]
    ]
);

term contents = `VBox ();

// partitioning summary

map<string,map> tm = Storage::GetTargetMap ();
integer used = 0;
integer free = 0;

list<string> disks = [];

foreach (string disk, map data, tm, {
    list<map<string,any> > partitions = data["partitions"]:[];
    foreach (map<string,any> p, partitions, {
	if (p["mount"]:"" == "swap" || (p["mount"]:"" != "" && p["format"]:false))
	{
	    used = used + p["size_k"]:0;
	}
	else if (p["type"]:nil != `extended)
	{
	    free = free + p["size_k"]:0;
	}
    });
    if (used > 0)
    {
	used = (100*used)/(used+free);
	disks = add (disks, sformat (
	    _("Use %1%% of disk %2 for Linux"), used, data["name"]:""));
    }
    else
    {
	disks = add (disks, sformat (_("Do not use disk %1"), data["name"]:""));
    }
});

contents = add (contents, `Left (`Heading (_("Partitioning"))));
foreach (string disk, disks, {
    contents = add (contents, `Left (`Label (disk)));
});

// end of partitioning summary
// bootloader summary

string timeout = BootCommon::globals["timeout"]:"";

boolean other = false;
foreach (map<string,any> s, BootCommon::sections, {
    if (s["type"]:"" == "other")
	other = true;
});

contents = add (contents, `VSpacing (1));
contents = add (contents, `Left (`Heading (_("System start-up"))));
contents = add (contents, `Left (`Label (other
    ? _("Ask whether to boot Linux or existing system")
    : _("Boot only Linux"))));
contents = add (contents, `Left (`Label (sformat (_("System start time-out: %1 seconds"), timeout))));

// end of bootloader summary
// keyboard entry

contents = add (contents, `VSpacing (1));
contents = add (contents, `Left (`Heading (_("Keyboard"))));
contents = add (contents, `Left (`Label (Keyboard::MakeProposal (false, false))));

// end of keyboard entry
// timezone entry

contents = add (contents, `VSpacing (1));
contents = add (contents, `Left (`Heading (_("Time Zone"))));
contents = add (contents, `Left (`Label (Timezone::timezone)));

// end of timezone entry

contents = `HBox (`HSpacing (2), contents, `HSpacing (2));
contents = `VBox (
    `VSpacing (1),
    contents,
    `VStretch (),
    `PushButton (`id (`change), _("Change Installation Settings")),
    `VSpacing (1)
);

// help text 1/3
string help = _("<p>
Use <b>Accept</b> to perform a new installation with the values displayed.</p>")
// help text 2/3
+ _("<p>
To change the values click the respective headline
or by press the <b>Change Installation Settings</b> button.</p>")
// help text 3/3
+ _("<p>
Your hard disk has not been modified, you can still safely abort.
</p>");



Wizard::SetContents (
    _("Installation settings"),
    contents,
    help,
    GetInstArgs::enable_back(),
    GetInstArgs::enable_next()
);
Wizard::SetTitleIcon ("yast-software");
Wizard::SetNextButton (`next, Label::AcceptButton ());

symbol ret = nil;

while (ret != `back && ret != `next)
{
    ret = (symbol)UI::UserInput ();
    if (ret == `abort && Popup::ConfirmAbort (`painless))
	return `abort;
    if (ret == `next)
    {
	LiveInstaller::run_full_proposal = false;
	ret = (symbol)WFM::CallFunction("inst_doit", [] );
    }
    else if (ret == `change)
    {
	LiveInstaller::run_full_proposal = true;
	ret = `next;
    }
}

return ret;
}
