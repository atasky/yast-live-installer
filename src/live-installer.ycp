/**
 * Maintainer:             Jiri Srain <jsrain@suse.cz>
 *
 * $Id: firstboot.ycp 36560 2007-02-28 12:40:38Z lslezak $
 */
{
    textdomain "live-installer";

    import "Mode";
    import "Stage";
    import "ProductControl";
    import "Wizard";
    import "Report";
    import "LiveInstaller";
    import "Misc";
    import "Installation";
    import "Product";
    import "CommandLine";
    import "Popup";

    string live_control_file = "/etc/YaST2/control-live.xml";

    // Bugzilla #269890, CommanLine "support"
    // argmap is only a map, CommandLine uses string parameters
    if (size (WFM::Args()) > 0) {
        Mode::SetUI ("commandline");
        y2milestone ("Mode CommandLine not supported, exiting...");
        // TRANSLATORS: error message - the module does not provide command line interface
        CommandLine::Print(_("There is no user interface available for this module."));
        return nil;
    }

    Wizard::OpenNextBackStepsDialog();

    if ($[] != (map)SCR::Read (.target.stat, live_control_file)) {
	ProductControl::custom_control_file = live_control_file;
        // replace general control file because of 2nd stage
	integer cpres = (integer)SCR::Execute (.target.bash, sformat ("/bin/cp %1 %2", live_control_file, "/etc/YaST2/control.xml"));
	if (cpres != 0)
	{
	    Report::Error (_("Failed to update the control file for the second stage of the installation"));
	    return nil;
	}
    }

    // check available memory
    list memories = (list) SCR::Read(.probe.memory);
    integer memsize = memories[0,"resource","phys_mem",0,"range"]:0;
    integer oneGB = 1073741824;
    y2milestone ("Physical memory %1", memsize);
    if (memsize < oneGB) {
	// pop-up, %1 is memory size, currently hardcoded "1 GB"
	if (! Popup::ContinueCancel (sformat  (_("Your computer has less than %1 of memory. This may not be
sufficient for the live installation, especially when installing
while running other applications.
Before continuing, finish all running applications."), "1 GB")))
	{
	    UI::CloseDialog();
	    return nil;
	}
    }

    // ensure all installation sources are disabled
    boolean source_init_success = Pkg::SourceStartManager( false );
    if (source_init_success) {
	LiveInstaller::source_states = Pkg::SourceEditGet();
	Pkg::SourceEditSet (maplist (map<string,any> s, LiveInstaller::source_states, {
	    s["enabled"] = false;
	    return s;
	}));
	foreach (string s, Pkg::ServiceAliases (), {
	    map<string,any> state = Pkg::ServiceGet (s);
	    LiveInstaller::service_states[s] = state;
	    state["enabled"] = false;
	    Pkg::ServiceSet (s, state);
	});
    }

    Installation::destdir = "/mnt";
    Installation::scr_destdir = "/mnt";
    import "Storage";

    Storage::SwitchUiAutomounter(false);

    // detect removable media, if they are mounted, they cannot be used for installation (bnc #437235)
    // this is a hack, since partitioner cannot provide information which partitions will be resized,
    // removed or formatted and thus mustn't be mounted during installation
    string cmd = "cat /proc/mounts  |grep '\/media\/'";
    if (0 == (integer)SCR::Execute (.target.bash, cmd))
    {
	// continue/cancel pop-up
	if (! Popup::ContinueCancel (_("YaST detected a mounted removable media. YaST cannot install
the system on media which is mounted.
To install the system on these media, unmount them first.")))
	{
	    Storage::SwitchUiAutomounter(true);
	    UI::CloseDialog();
	    return nil;
	}
    }

    // do several checks because of DMRAID problems - bug #328388
    map out = (map)SCR::Execute (.target.bash_output, "
/etc/init.d/boot.device-mapper start
/etc/init.d/boot.dmraid start
/etc/init.d/boot.lvm start
echo 1 > /sys/module/md_mod/parameters/start_ro
mdadm --examine --scan --config=partitions >/tmp/mdadm.conf
mdadm --assemble --scan --config=/tmp/mdadm.conf
");
    y2milestone ("Device initialization output: %1", out);
    out = (map)SCR::Execute (.target.bash_output, "
hwinfo --disk | grep \"^Drive status: soft raid\"
");
    y2milestone ("Soft raid detection: %1", out);
    if (out["exit"]:-1 == 0)
    {
	if (! Popup::ContinueCancel (
// continue-cancel popup
_("openSUSE installer detected DMRAID array.
It is not supported by the openSUSE live installer.
Continuing the installation may cause data loss.")))
	{
	    Storage::SwitchUiAutomounter(true);
	    UI::CloseDialog ();
	    return `back;
	}
    }

    list<map> stage_mode = [
	$["stage": "initial",  "mode": "live_installation" ],
	$["stage": "continue",  "mode": "live_installation" ]
    ];
    y2internal ("SM: %1", stage_mode);
    Mode::SetMode ("live_installation");
    // Stage::initial is required for most of the modules to behave correctly
    Stage::Set ("initial");
    Storage::InitLibstorage (false);

    if (!ProductControl::Init())
        y2error("control file %1 not found", ProductControl::custom_control_file );
    ProductControl::AddWizardSteps(stage_mode);

    // Do log Report messages by default (#180862)
    Report::LogMessages(true);
    Report::LogErrors(true);
    Report::LogWarnings(true);

    symbol ret = ProductControl::Run();
    y2milestone("ProductControl::Run() returned: %1", ret);

    // reenable sources/services
    Pkg::SourceEditSet (LiveInstaller::source_states);
    foreach (string s, map<string,any> state, LiveInstaller::service_states, {
	Pkg::ServiceSet (s, state);
	Pkg::ServiceSave (s);
    });

    Pkg::SourceFinishAll();
    Pkg::TargetFinish();

    Storage::SwitchUiAutomounter(true);
    UI::CloseDialog();

    return ret;
}
